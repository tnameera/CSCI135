#include "Tortoise.h"
#include <cstdlib>

    //TODO: define constructors. 
    //1. Default constructor initializes position to be 0,
    //and move pattern to reflect the following data. 
    //50% of the time, tortoise moves forward 3 blocks.
    //20% of the time, tortoise moves 6 blocks backward.
    //30% of the time, tortoise moves 1 block forward.

Tortoise::Tortoise() : length(10)
{
    //length = 10;
    pattern = new int[length]; //dynamically allocated 10-ints
    int defaultPattern[] = {3, 3, 3, 3, 3, -6, -6, 1, 1, 1};
    for (int i = 0; i < length; i++)
        pattern[i] = defaultPattern[i];

    position = 0;
}

//TODO: non-default constructor with given move //pattern together with pattern size, 
//and given //position, use give parameter to initialize //corresponding data members.

Tortoise::Tortoise(int* pattern, int size, int position) : 
    length(size > 0 ? size : 10)

{
    (*this).pattern = new int[length]; 
    if (size > 0)
       for (int i = 0; i < size; i++)
           this->pattern[i] = pattern[i];
    else //size <= 0
    {
        int defaultPattern[] = 
            {3, 3, 3, 3, 3, -6, -6, 1, 1, 1};
        for (int i = 0; i < length; i++)
            this->pattern[i] = defaultPattern[i]; 
            //ADD this-> before pattern[i]
    }

    this->position = position; 
}

Tortoise::~Tortoise()
{
    delete[] pattern;
    pattern = 0; //set pattern to be nullptr
}

//TODO: implement other member functions of Hare class
int Tortoise::getPosition() const
{
    return position; 
}

int* Tortoise::getPattern() const
{
    return pattern;
}

    //Position generated by move() might be out of //boundary of the road (slip pass the leftmost block or 
    //slop past the rightmost block of the road),
    //reset the position to an appropriate number.

int Tortoise::getPatternLength() const
{
    return length;
}

void Tortoise::setPosition(int newPosition)
{
    position = newPosition;
}

    //Move the tortoise by generating a random number 
    //in [0, size of array pattern), 
    //then move the animal according to its move pattern. 
    //The position will be further validated once the animal //participates in a competition and knows road length.
    //Competitor call fall of roads (suppose we have pads 
    //at both ends of the road.

void Tortoise::move()
{
    int index = rand() % length;
    int stepsToMove = pattern[index];
    position += stepsToMove;
    //warning: cannot write
    //int position += stepsToMove;
    //otherwise, the int declaration before position
    //means position is a local variable,
    //so position is not data member position now.
}

   
